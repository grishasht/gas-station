package ua.kpi.dziuba.gasstation.service;

import org.springframework.stereotype.Component;
import ua.kpi.dziuba.gasstation.model.IUser;

import java.util.List;
import java.util.UUID;

/**
 * Клас - сервіс, який викликається із відповідного контроллера та
 * використовує відповідний репозиторій для своєї роботи.
 */
@Component
public interface IUserService {

    /**
     * Метод, який викликається з контроллера для обробки запиту клієнта на створення
     * нового користувача.
     *
     * @param user - тіло нового користувача із даними
     * @return новий користувач із бази даних по заданим параметрам.
     */
    IUser createUser(IUser user);

    /**
     * Метод, який викликається з контроллера для обробки запиту клієнта на вилучення
     * користувача. Вилучає користувача із бази даних по параметру унікального ідентифікатора
     * користувача
     *
     * @param guid - унікальний ідентифікатор користувача, по якому будуть
     *                вилучатися дані із бази
     * @return вилучений користувач із бази даних по заданим параметрам.
     */
    IUser getUserInfo(UUID guid);

    /**
     * Метод, який викликається з контроллера для обробки запиту клієнта на вилучення
     * користувача. Вилучає користувача із бази даних по параметру логіну
     * користувача
     *
     * @param login - логін користувача, по якому будуть вилучатися дані із бази
     * @return вилучений користувач із бази даних по заданим параметрам.
     */
    IUser getUserByLogin(String login);

    /**
     * Метод, який викликається з контроллера для обробки запиту клієнта на оновлення
     * попередньо створеного користувача. Оновлює сутність в базі даних по параметрах
     * унікального ідентифікатора користувача та моделі з новими даними користувача
     *
     * @param newUserInfo - тіло із новими даними існуючого користувача
     * @param userGuid - унікальний ідентифікатор користувача по якому буде виконуватися видалення.
     * @return оновленого користувача
     */
    IUser updateUserByGuid(IUser newUserInfo, UUID userGuid);

    /**
     * Метод, який викликається з контроллера для обробки запиту клієнта для видалення користувача.
     *
     * @param guid - унікальний ідентифікатор користувача по якому буде виконуватися видалення.
     * @return видаленого користувача по заданим параметрам
     */
    IUser removeUserByGuid(UUID guid);

    /**
     * Метод, який перевіряє відправлені в запиті на сервер дані на валідність по узгоджених умовах.
     *
     * Умови:
     *      - адреса електронної почти (регулярний вираз): \\S{4,25}@\\w{1,10}.\\w{1,4}
     *          Відправлена електронна почта має бути у вигляді:
     *          1. від 4-х до 25-ти друкованих символів, таких як букви, цифри та знаки типу: -, _, ₴ і тд. ;
     *          2. символ електронної адреси: @ ;
     *          3. набір друкованих символів букв довжиною від 1 до 10 символів ;
     *          4. роздільник адресу домену: . ;
     *          5. набір символів букв довжиною від 1 до 4 символів
     *
     *      - логін (регулярний вираз): \\S{4,20}
     *          Відправлений логін має бути у вигляді набору символів довжиною від 4 до 20 друкованих символів:
     *          букв, цифр, спеціальних символів таких як -, _, %, "
     *
     *      - пароль (регулярний вираз): ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{6,}$
     *          Відправлений пароль має обов'язково складатися хоча б із однієї букви верхнього регістру,
     *          однієї букви нижнього регістру, цифри та спеціального знаку та бути довжиною мінімум 6 символів.
     *
     * @param user - модель користувача, в якій знаходяться дані, які потребують валідації.
     * @return true - якщо дані валідні. false - якщо валідація пройшла неуспішно.
     */
    Boolean validateUserData(IUser user);
}
